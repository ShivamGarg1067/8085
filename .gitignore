#include<iostream.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<math.h>


int value;
char address[6];
char Z='0',CY='0',S='0';
char H[3]="00",L[3]="00",D[3]="00",E[3]="00",B[3]="00",C[3]="00",A[4]="000",M[4]="000",SP[6]="0000";
char i_c[6],i_h[4];

void LXI(char r[],char ad[]);
void LHLD(char ad[]);
void SHLD(char ad[]);
void ADD(char r1[]);
void ADI(char ad[]);
void DAD(char r[]);
void SUB(char r1[]);
void SUI(char ad[]);
void MOV(char r1[],char r2[]);
void MVI(char r1[],char ad[]);
void XCHG();
void INX(char r[]);
void INR(char r[]);
void DCR(char r[]);
void DCX(char r[]);
void LDA(char ad[]);
void LDAX(char r[]);
void STA(char ad[]);
void STAX(char r[]);
void CMP(char r[]);
void CPI(char ad[]);
void PUSH(char r[]);
void POP(char r[]);
void SPHL();
void XTHL();
void STC();
void CMC();
void JNZ(char ad[]);
void JNC(char ad[]);
void JM(char ad[]);
void JP(char ad[]);
void JC(char ad[]);
void JZ(char ad[]);
void HLT();
void NOP();



void load_mem();
void mem_load();
void int_hex(long int in,char r[]);
long int  hex_int(char h[]);
long int  char_int(char r[]);
void int_char(long int in,char r[]);
void input();
void hex(long int n);
void memory_create();
void memory_modify(char add[],char vlu[]);
void memory_read(char add[],char reg[]);
void instruct_save();
void instruct_read();




void main()
{
 clrscr();
 char ch;

 printf("LOAD THE REGISTERS?(y/n)\n");
 scanf("%c",&ch);
 if((ch=='y')||(ch=='Y'))
 {
  input();
 }
 fflush(stdin);

 memory_create();
 instruct_save();
 instruct_read();

 getch();

}


void hex(long int n)
{

long int d=0,b=0;
long int i=0,j=0,k=0;


char hexd[6];
d=n;

while(d!=0)
{
b=(d%16);
d=d/16;

switch(b)
{
case 0:
   hexd[i]='0';
   i++;
   break;
case 1:
   hexd[i]='1';
   i++;
   break;
case 2:
   hexd[i]='2';
   i++;
   break;
case 3:
   hexd[i]='3';
   i++;
   break;
case 4:
   hexd[i]='4';
   i++;
   break;
case 5:
   hexd[i]='5';
   i++;
   break;
case 6:
   hexd[i]='6';
   i++;
   break;
case 7:
   hexd[i]='7';
   i++;
   break;
case 8:
   hexd[i]='8';
   i++;
   break;
case 9:
   hexd[i]='9';
   i++;
   break;
case 10:
   hexd[i]='A';
   i++;
   break;
case 11:
   hexd[i]='B';
   i++;
   break;
case 12:
   hexd[i]='C';
   i++;
   break;
case 13:
   hexd[i]='D';
   i++;
   break;
case 14:
   hexd[i]='E';
   i++;
   break;
case 15:
   hexd[i]='F';
   i++;
   break;

}
}


for(j=0;j<4-i;j++)
{
 address[j]='0';
}
for(j=4-i,k=i-1;k>=0;j++,k--)
{
 address[j]=hexd[k];
}
 address[4]='H';
}

void memory_create()
{
long int i;

int ran;

FILE *fpi1;
fpi1=fopen("Memory.dat","wb+");


for(i=0;i<65536;i++)
{
 hex(i);
 fprintf(fpi1,"%s ",address);

 ran=rand()%256;
 value=ran;
 if(ran>=100)
 {
  fprintf(fpi1,"%d ",value);
 }
 if((ran<100)&&(ran>9))
 {
  fprintf(fpi1,"0%d ",value);
 }
 if((ran<10)&&(ran>0))
 {
  fprintf(fpi1,"00%d ",value);
 }
 if(ran==0)
 {
  fprintf(fpi1,"000 ");
 }
}
 fclose(fpi1);
}



void memory_read(char add[],char reg[])
{

long int m=0,p=0,j=0,l=0,vlu=0;
char ad[6],val[4],ch;

FILE *fpo1;
fpo1=fopen("Memory.dat","rb+");
fseek(fpo1, 0, SEEK_SET);

do
{
 for(l=0;l<5;l++)
 {
   // read a char from the file
   ch = fgetc(fpo1);

   if(ch!=' ')
   {
    ad[m]=ch;
    m++;
   }
   }
   ad[m]='\0';
   //printf("%s\t",(add));
   m=0;
   ch = fgetc(fpo1);

   for(j=0;j<3;j++)
   {
    ch = fgetc(fpo1);
    if(ch!=' ')
   {
    val[p]=ch;
    p++;
   }
   }
   val[p]='\0';
   //printf("%s\n",val);
   p=0;
   ch = fgetc(fpo1);

   if(strcmp(ad,add)==0)
   {
    if(strcmp(reg,"H")==0)
    {
     vlu=char_int(val);
     int_hex(vlu,"H");
     mem_load();
    }
    else if(strcmp(reg,"L")==0)
    {
     vlu=char_int(val);
     int_hex(vlu,"L");
     mem_load();
    }
    else if(strcmp(reg,"B")==0)
    {
     vlu=char_int(val);
     int_hex(vlu,"B");
    }
    else if(strcmp(reg,"C")==0)
    {
     vlu=char_int(val);
     int_hex(vlu,"C");
    }
    else if(strcmp(reg,"D")==0)
    {
     vlu=char_int(val);
     int_hex(vlu,"D");
    }
    else if(strcmp(reg,"E")==0)
    {
     vlu=char_int(val);
     int_hex(vlu,"E");
    }
    else if(strcmp(reg,"A")==0)
    {
     strcpy(A,val);
    }
    else if(strcmp(reg,"M")==0)
    {
     strcpy(M,val);
    }
   }
 }while(ch!=EOF);

fclose(fpo1);
}


void memory_modify(char add[],char vlu[])
{

long int m=0,p=0,j=0,l=0;
char ad[6],val[4],ch;

FILE *fpo1,*fpi1;
fpo1=fopen("Memory.dat","rb+");
fpi1=fopen("Temp_mem.dat","wb+");
fseek(fpo1, 0, SEEK_SET);


do
{
 for(l=0;l<5;l++)
 {
   // read a char from the file
   ch = fgetc(fpo1);
   fputc(ch,fpi1);


   if(ch!=' ')
   {
    ad[m]=ch;
    m++;
   }
   }
   ad[m]='\0';
   m=0;
   ch = fgetc(fpo1);
   fputc(ch,fpi1);

   if(strcmp(ad,add)==0)
   {
   for(j=0;j<3;j++)
   {
    fgetc(fpo1);
    ch=vlu[j];
    fputc(ch,fpi1);
    if(ch!=' ')
   {
    val[p]=ch;
    p++;
   }
   }
   val[p]='\0';
   p=0;
   ch = fgetc(fpo1);
   fputc(ch,fpi1);
   }
   else{
   for(j=0;j<3;j++)
   {
    ch = fgetc(fpo1);
    fputc(ch,fpi1);
    if(ch!=' ')
   {
    val[p]=ch;
    p++;
   }
   }
   val[p]='\0';
   p=0;
   ch = fgetc(fpo1);
   fputc(ch,fpi1);
}

}while(ch!=EOF);

fclose(fpo1);
fclose(fpi1);

remove("Memory.dat");
rename("Temp_mem.dat","Memory.dat");
}



void instruct_save()
{
 char code[50];
 FILE *fpi1;

 fpi1=fopen("Instruct.dat","wb+");
 printf("Enter The Instructions \nEnter HLT to Terminate \n");
 while(strcmp(code,"HLT")!=0)
 {

 gets(code);
 fflush(stdin);

  fprintf(fpi1,"%s",code);

  fprintf(fpi1,"\n");

 }
 fclose(fpi1);
}



void instruct_read()
{
char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
      }
     }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;

      if(strcmp(fxn,"HLT")==0)
      {
       HLT();
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }


      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
       JNZ(add);
      }
      else if(strcmp(fxn,"JNC")==0)
      {
       JNC(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
       JM(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
       JP(add);
      }
       else if(strcmp(fxn,"JC")==0)
      {
       JC(add);
      }
       else if(strcmp(fxn,"JZ")==0)
      {
       JZ(add);
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

    }
  }
}
fclose(fpo1);
}


void INX(char r[])
{
char add[5];
long int a=0;
if(strcmp(r,"H")==0)
{
if((strlen(H)==2)&&(strlen(L)==2))
{
add[0]=H[0];
add[1]=H[1];
add[2]=L[0];
add[3]=L[1];
add[4]='\0';

 a=hex_int(add)+1;
 if(a>65535)
 {
 CY='1';
 a=a-65536;
 }
  hex(a);

 //int_hex(a,"address");
 H[0]=address[0];
 H[1]=address[1];
 H[2]='\0';
 L[0]=address[2];
 L[1]=address[3];
 L[2]='\0';
 mem_load();
}
}
else if(strcmp(r,"B")==0)
{
if((strlen(B)==2)&&(strlen(C)==2))
{
add[0]=B[0];
add[1]=B[1];
add[2]=C[0];
add[3]=C[1];
add[4]='\0';

 a=hex_int(add)+1;
 if(a>65535)
 {
 CY='1';
 a=a-65536;
 }
 hex(a);

 //int_hex(a,"address");
 B[0]=address[0];
 B[1]=address[1];
 B[2]='\0';
 C[0]=address[2];
 C[1]=address[3];
 C[2]='\0';
}
}
else if(strcmp(r,"D")==0)
{
if((strlen(D)==2)&&(strlen(E)==2))
{
add[0]=D[0];
add[1]=D[1];
add[2]=E[0];
add[3]=E[1];
add[4]='\0';

 a=hex_int(add)+1;
 if(a>65535)
 {
 CY='1';
 a=a-65536;
 }
 hex(a);
 //int_hex(a,"address");
 D[0]=address[0];
 D[1]=address[1];
 D[2]='\0';
 E[0]=address[2];
 E[1]=address[3];
 E[2]='\0';
}
}
else if(strcmp(r,"SP")==0)
{
if(strlen(SP)==4)
{
add[0]=SP[0];
add[1]=SP[1];
add[2]=SP[2];
add[3]=SP[3];
add[4]='\0';

 a=hex_int(add)+1;
 if(a>65535)
 {
 CY='1';
 a=a-65536;
 }
  hex(a);
 //int_hex(a,"address");
 SP[0]=address[0];
 SP[1]=address[1];
 SP[2]=address[2];
 SP[3]=address[3];
 SP[4]='\0';
}
}
else
{
printf("!!! SYNTAX ERROR !!!");
}
}

void LXI(char r[],char ad[])
{
if(strlen(ad)==5)
{

char add[6];
strcpy(add,ad);
if(strcmp(r,"H")==0)
{
  H[0]=add[0];
  H[1]=add[1];
  H[2]='\0';

  L[0]=add[2];
  L[1]=add[3];
  L[2]='\0';

 cout<<H<<"\n";
 cout<<L<<"\n";
 memory_read(add,"M");
 cout<<M<<"\n";
}
else if(strcmp(r,"B")==0)
{
  B[0]=add[0];
  B[1]=add[1];
  B[2]='\0';

  C[0]=add[2];
  C[1]=add[3];
  C[2]='\0';

 cout<<B<<"\n";
 cout<<C<<"\n";
}
else if(strcmp(r,"D")==0)
{
  D[0]=add[0];
  D[1]=add[1];
  D[2]='\0';

  E[0]=add[2];
  E[1]=add[3];
  E[2]='\0';

 cout<<D<<"\n";
 cout<<E<<"\n";
}
else if(strcmp(r,"SP")==0)
{
 SP[0]=add[0];
 SP[1]=add[1];
 SP[2]=add[2];
 SP[3]=add[3];
 SP[4]='\0';
}
else
{
printf("!!! SYNTAX ERROR !!!");
}
}
}


void LHLD(char ad[])
{
char add[6];
long int a=0;

memory_read(ad,"L");
mem_load();

add[0]=ad[0];
add[1]=ad[1];
add[2]=ad[2];
add[3]=ad[3];
add[4]='\0';

a=hex_int(add)+1;
hex(a);

add[0]=address[0];
add[1]=address[1];
add[2]=address[2];
add[3]=address[3];
add[4]='H';
add[5]='\0';
cout<<add<<"\n";

memory_read(add,"H");
mem_load();

}


void SHLD(char ad[])
{
char add[6];
long int a=0,l=0,h=0;

if(strlen(L)==2)
{
l=hex_int(L);
int_char(l,"i_c");
memory_modify(ad,i_c);
}

add[0]=ad[0];
add[1]=ad[1];
add[2]=ad[2];
add[3]=ad[3];
add[4]='\0';

a=hex_int(add)+1;
hex(a);

add[0]=address[0];
add[1]=address[1];
add[2]=address[2];
add[3]=address[3];
add[4]='H';
add[5]='\0';
cout<<add<<"\n";

if(strlen(H)==2)
{
h=hex_int(H);
int_char(h,"i_c");
memory_modify(add,i_c);
}
}



void ADD(char r1[])
{
 long int a=0,b=0,c=0;
 if(strcmp(r1,"M")==0)
 {
  a=char_int(A);
  b=char_int(M);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
  }
  else
  {
    CY='0';
  }

  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
  S='0';
  int_char(c,"A");
 }
 else if(strcmp(r1,"B")==0)
 {
  a=char_int(A);
  b=hex_int(B);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"C")==0)
 {
  a=char_int(A);
  b=hex_int(C);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"D")==0)
 {
  a=char_int(A);
  b=hex_int(D);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"E")==0)
 {
  a=char_int(A);
  b=hex_int(E);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"H")==0)
 {
  a=char_int(A);
  b=hex_int(H);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"L")==0)
 {
  a=char_int(A);
  b=hex_int(L);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
 else if(strcmp(r1,"A")==0)
 {
  a=char_int(A);
  b=char_int(A);
  c=a+b;
  if(c>255)
  {
   CY='1';
   c=c-256;
   }
   else
   {
   CY='0';
   }
   if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    S='0';
  int_char(c,"A");
 }
else
{
 printf("!!! SYNTAX ERROR !!!");
}
}


void ADI(char ad[])
{
char add[3];
long int a=0,b=0,c=0;

add[0]=ad[0];
add[1]=ad[1];
add[2]='\0';

a=char_int(A);
b=hex_int(add);

c=a+b;
if(c>255)
{
c=c-256;
CY='1';
}
else
{
CY='0';
}
if(c==0)
{
Z='1';
}
else
Z='0';

S='0';

int_char(c,"A");
}



void DAD(char r[])
{
char add1[6],add2[6];
long int a=0,b=0,c=0;
if((strlen(H)==2)&&(strlen(L)==2))
{
add1[0]=H[0];
add1[1]=H[1];
add1[2]=L[0];
add1[3]=L[1];
add1[4]='\0';
}

if(strcmp(r,"B")==0)
{
if((strlen(B)==2)&&(strlen(C)==2))
{
add2[0]=B[0];
add2[1]=B[1];
add2[2]=C[0];
add2[3]=C[1];
add2[4]='\0';
a=hex_int(add1);
b=hex_int(add2);
c=a+b;
if(c>65535)
{
c=c-65536;
CY='1';
}
else
{
CY='0';
}
hex(c);
H[0]=address[0];
H[1]=address[1];
H[2]='\0';
L[0]=address[2];
L[1]=address[3];
L[2]='\0';
mem_load();
}
}
else if(strcmp(r,"D")==0)
{
if((strlen(D)==2)&&(strlen(E)==2))
{
add2[0]=D[0];
add2[1]=D[1];
add2[2]=E[0];
add2[3]=E[1];
add2[4]='\0';
a=hex_int(add1);
b=hex_int(add2);
c=a+b;
if(c>65535)
{
c=c-65536;
CY='1';
}
else
{
CY='0';
}
hex(c);
H[0]=address[0];
H[1]=address[1];
H[2]='\0';
L[0]=address[2];
L[1]=address[3];
L[2]='\0';
mem_load();
}
}
if(strcmp(r,"SP")==0)
{
if(strlen(SP)==4)
{
add2[0]=SP[0];
add2[1]=SP[1];
add2[2]=SP[2];
add2[3]=SP[3];
add2[4]='\0';
a=hex_int(add1);
b=hex_int(add2);
c=a+b;
if(c>65535)
{
c=c-65536;
CY='1';
}
else
{
CY='0';
}
hex(c);
H[0]=address[0];
H[1]=address[1];
H[2]='\0';
L[0]=address[2];
L[1]=address[3];
L[2]='\0';
mem_load();
}
}
else
{
printf("!!! SYNTAX ERROR !!!");
}
}


void CPI(char ad[])
{
 char add[3];
 long int a=0,b=0;

 add[0]=ad[0];
 add[1]=ad[1];
 add[2]='\0';

 a=char_int(A);
 b=hex_int(add);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
}



void CMP(char r[])
{
 long int a=0,b=0;

 if(strcmp(r,"A")==0)
 {
  Z='1';
 }
 else if(strcmp(r,"B")==0)
 {
 a=char_int(A);
 b=hex_int(B);

 if(a==b)
 {
  Z='1';


 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }
 else if(strcmp(r,"C")==0)
 {
 a=char_int(A);
 b=hex_int(C);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }
 else if(strcmp(r,"D")==0)
 {
 a=char_int(A);
 b=hex_int(D);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }
 else if(strcmp(r,"E")==0)
 {
 a=char_int(A);
 b=hex_int(E);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }
 else if(strcmp(r,"H")==0)
 {
 a=char_int(A);
 b=hex_int(H);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }
 else if(strcmp(r,"L")==0)
 {
 a=char_int(A);
 b=hex_int(L);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }
 else if(strcmp(r,"M")==0)
 {
 a=char_int(A);
 b=char_int(M);

 if(a==b)
 {
  Z='1';
 }
 else if(a<b)
 {
  CY='1';
 }
 else if(a>b)
 {
  CY='0';
  Z='0';
 }
 }

}



void SUB(char r1[])
{
 long int a=0,b=0,c=0;
 if(strcmp(r1,"M")==0)
 {
  a=char_int(A);
  b=char_int(M);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
    CY='0';
  int_char(c,"A");
 }
 else if(strcmp(r1,"B")==0)
 {
  a=char_int(A);
  b=hex_int(B);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
   CY='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"C")==0)
 {
  a=char_int(A);
  b=hex_int(C);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
   CY='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"D")==0)
 {
  a=char_int(A);
  b=hex_int(D);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
   CY='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"E")==0)
 {
  a=char_int(A);
  b=hex_int(E);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
   CY='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"H")==0)
 {
  a=char_int(A);
  b=hex_int(H);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
   CY='0';
  int_char(c,"A");
 }
  else if(strcmp(r1,"L")==0)
 {
  a=char_int(A);
  b=hex_int(L);
  c=a-b;
  if(c<0)
  {
   S='1';
   c=(-1)*c;
  }
  else
  {
   S='0';
  }
  if(c==0)
  {
   Z='1';
  }
  else
  {
   Z='0';
  }
   CY='0';
  int_char(c,"A");
 }
 else if(strcmp(r1,"A")==0)
 {
  Z='1';
  S='0';
  CY='0';
  int_char(0,"A");
 }
 else
{
printf("!!! SYNTAX ERROR !!!");
}
}


void SUI(char ad[])
{
char add[3];
long int a=0,b=0,c=0;

add[0]=ad[0];
add[1]=ad[1];
add[2]='\0';

a=char_int(A);
b=hex_int(add);

c=a-b;
if(c<0)
{
c=c*(-1);
S='1';
}
else
{
S='0';
}
if(c==0)
{
Z='1';
}
else
Z='0';

CY='0';

int_char(c,"A");
}



void MOV(char r1[],char r2[])
{
 long int a;
//cout<<"r1:"<<r1<<"\n"<<"r2:"<<r2<<"\n";
if(strcmp(r1,"H")==0)
{
 if(strcmp(r2,"H")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 strcpy(H,L);
 mem_load();
 }
 else if(strcmp(r2,"B")==0)
 {
 strcpy(H,B);
 mem_load();
 }
 else if(strcmp(r2,"C")==0)
 {
 strcpy(H,C);
 mem_load();
 }
 else if(strcmp(r2,"D")==0)
 {
 strcpy(H,D);
 mem_load();
 }
 else if(strcmp(r2,"E")==0)
 {
 strcpy(H,E);
 mem_load();
 }
 else if(strcmp(r2,"M")==0)
 {
 a=char_int(M);
 int_hex(a,"H");
 mem_load();
 }
 else if(strcmp(r2,"A")==0)
 {
 a=char_int(A);
 int_hex(a,"H");
 mem_load();
 }
 else
{
printf("!!! SYNTAX ERROR !!!");
}
}
else if(strcmp(r1,"L")==0)
{
 if(strcmp(r2,"L")==0)
 {
 }
 else if(strcmp(r2,"H")==0)
 {
 strcpy(L,H);
 mem_load();
 }
 else if(strcmp(r2,"B")==0)
 {
 strcpy(L,B);
 mem_load();
 }
 else if(strcmp(r2,"C")==0)
 {
 strcpy(L,C);
 mem_load();
 }
 else if(strcmp(r2,"D")==0)
 {
 strcpy(L,D);
 mem_load();
 }
 else if(strcmp(r2,"E")==0)
 {
 strcpy(L,E);
 mem_load();
 }
 else if(strcmp(r2,"M")==0)
 {
 a=char_int(M);
 int_hex(a,"L");
 mem_load();
 }
 else if(strcmp(r2,"A")==0)
 {
 a=char_int(A);
 int_hex(a,"L");
 mem_load();
 }
 else
{
printf("!!! SYNTAX ERROR !!!");
}
}
else if(strcmp(r1,"B")==0)
{
 if(strcmp(r2,"B")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 strcpy(B,L);
 }
 else if(strcmp(r2,"H")==0)
 {
 strcpy(B,H);
 }
 else if(strcmp(r2,"C")==0)
 {
 strcpy(B,C);
 }
 else if(strcmp(r2,"D")==0)
 {
 strcpy(B,D);
 }
 else if(strcmp(r2,"E")==0)
 {
 strcpy(B,E);
 }
 else if(strcmp(r2,"M")==0)
 {
 a=char_int(M);
 int_hex(a,"B");
 }
 else if(strcmp(r2,"A")==0)
 {
 a=char_int(A);
 int_hex(a,"B");
 }
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
else if(strcmp(r1,"C")==0)
{
 if(strcmp(r2,"C")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 strcpy(C,L);
 }
 else if(strcmp(r2,"B")==0)
 {
 strcpy(C,B);
 }
 else if(strcmp(r2,"H")==0)
 {
 strcpy(C,H);
 }
 else if(strcmp(r2,"D")==0)
 {
 strcpy(C,D);
 }
 else if(strcmp(r2,"E")==0)
 {
 strcpy(C,E);
 }
 else if(strcmp(r2,"M")==0)
 {
 a=char_int(M);
 int_hex(a,"C");
 }
 else if(strcmp(r2,"A")==0)
 {
 a=char_int(A);
 int_hex(a,"C");
 }
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
else if(strcmp(r1,"D")==0)
{
 if(strcmp(r2,"D")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 strcpy(D,L);
 }
 else if(strcmp(r2,"B")==0)
 {
 strcpy(D,B);
 }
 else if(strcmp(r2,"C")==0)
 {
 strcpy(D,C);
 }
 else if(strcmp(r2,"H")==0)
 {
 strcpy(D,H);
 }
 else if(strcmp(r2,"E")==0)
 {
 strcpy(D,E);
 }
 else if(strcmp(r2,"M")==0)
 {
 a=char_int(M);
 int_hex(a,"D");
 }
 else if(strcmp(r2,"A")==0)
 {
 a=char_int(A);
 int_hex(a,"D");
 }
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
else if(strcmp(r1,"E")==0)
{
 if(strcmp(r2,"E")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 strcpy(E,L);
 }
 else if(strcmp(r2,"B")==0)
 {
 strcpy(E,B);
 }
 else if(strcmp(r2,"C")==0)
 {
 strcpy(E,C);
 }
 else if(strcmp(r2,"D")==0)
 {
 strcpy(E,D);
 }
 else if(strcmp(r2,"H")==0)
 {
 strcpy(E,H);
 }
 else if(strcmp(r2,"M")==0)
 {
 a=char_int(M);
 int_hex(a,"E");
 }
 else if(strcmp(r2,"A")==0)
 {
 a=char_int(A);
 int_hex(a,"E");
 }
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
else if(strcmp(r1,"A")==0)
{
 if(strcmp(r2,"A")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 a=hex_int(L);
 int_char(a,"A");
 }
 else if(strcmp(r2,"B")==0)
 {
 a=hex_int(B);
 int_char(a,"A");
 }
 else if(strcmp(r2,"C")==0)
 {
 a=hex_int(C);
 int_char(a,"A");
 }
 else if(strcmp(r2,"D")==0)
 {
 a=hex_int(D);
 int_char(a,"A");
 }
 else if(strcmp(r2,"E")==0)
 {
 a=hex_int(E);
 int_char(a,"A");
 }
 else if(strcmp(r2,"M")==0)
 {
 strcpy(A,M);
 }
 else if(strcmp(r2,"H")==0)
 {
 a=hex_int(H);
 int_char(a,"A");
 }
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
else if(strcmp(r1,"M")==0)
{
 if(strcmp(r2,"M")==0)
 {
 }
 else if(strcmp(r2,"L")==0)
 {
 a=hex_int(L);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r2,"B")==0)
 {
 a=hex_int(B);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r2,"C")==0)
 {
 a=hex_int(C);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r2,"D")==0)
 {
 a=hex_int(D);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r2,"E")==0)
 {
 a=hex_int(E);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r2,"H")==0)
 {
 a=hex_int(H);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r2,"A")==0)
 {
 strcpy(M,A);
 load_mem();
 }
  else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}


void MVI(char r1[],char ad[])
{
 long int a=0;
 char add[3];
 add[0]=ad[0];
 add[1]=ad[1];
 add[2]='\0';

 if(strcmp(r1,"M")==0)
 {
 a=hex_int(add);
 int_char(a,"M");
 load_mem();
 }
 else if(strcmp(r1,"L")==0)
 {
 a=hex_int(add);
 int_hex(a,"L");
 mem_load();
 }
 else if(strcmp(r1,"B")==0)
 {
 a=hex_int(add);
 int_hex(a,"B");
 }
 else if(strcmp(r1,"C")==0)
 {
 a=hex_int(add);
 int_hex(a,"C");
 }
 else if(strcmp(r1,"D")==0)
 {
 a=hex_int(add);
 int_hex(a,"D");
 }
 else if(strcmp(r1,"E")==0)
 {
 a=hex_int(add);
 int_hex(a,"E");
 }
 else if(strcmp(r1,"H")==0)
 {
 a=hex_int(add);
 int_hex(a,"H");
 mem_load();
 }
 else if(strcmp(r1,"A")==0)
 {
 a=hex_int(add);
 int_char(a,"A");
 }
  else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}


void XCHG()
{
MOV("B","D");
MOV("D","H");
MOV("H","B");
MOV("B","E");
MOV("E","L");
MOV("L","B");
}



void DCR(char r[])
{
long int a=0;
if(strcmp(r,"A")==0)
{
a=char_int(A);
a--;
if(a==0)
{
Z='1';
}
int_char(a,"A");
}
else if(strcmp(r,"B")==0)
{
a=hex_int(B);
a--;
if(a==0)
{
Z='1';
}
int_hex(a,"B");
}
else if(strcmp(r,"C")==0)
{
a=hex_int(C);
a--;
if(a==0)
{
Z='1';
}
int_hex(a,"C");
}
else if(strcmp(r,"D")==0)
{
a=hex_int(D);
a--;
if(a==0)
{
Z='1';
}
int_hex(a,"D");
}
else if(strcmp(r,"E")==0)
{
a=hex_int(E);
a--;
if(a==0)
{
Z='1';
}
int_hex(a,"E");
}
else if(strcmp(r,"H")==0)
{
a=hex_int(H);
a--;
int_hex(a,"H");
mem_load();
if(a==0)
{
Z='1';
}
}
else if(strcmp(r,"L")==0)
{
a=hex_int(L);
a--;
int_hex(a,"L");
mem_load();
if(a==0)
{
Z='1';
}
}
else if(strcmp(r,"M")==0)
{
a=char_int(M);
a--;
int_char(a,"M");
load_mem();
if(a==0)
{
Z='1';
}
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}


void DCX(char r[])
{
 char add[5];
long int a=0;
if(strcmp(r,"H")==0)
{
if((strlen(H)==2)&&(strlen(L)==2))
{
add[0]=H[0];
add[1]=H[1];
add[2]=L[0];
add[3]=L[1];
add[4]='\0';

 a=hex_int(add)-1;
 hex(a);
 if(a==0)
 {
  Z='1';
 }

 //int_hex(a,"address");
 H[0]=address[0];
 H[1]=address[1];
 H[2]='\0';
 L[0]=address[2];
 L[1]=address[3];
 L[2]='\0';
 mem_load();
}
}
else if(strcmp(r,"B")==0)
{
if((strlen(B)==2)&&(strlen(C)==2))
{
add[0]=B[0];
add[1]=B[1];
add[2]=C[0];
add[3]=C[1];
add[4]='\0';

 a=hex_int(add)-1;
 hex(a);
 if(a==0)
 {
  Z='1';
 }

 //int_hex(a,"address");
 B[0]=address[0];
 B[1]=address[1];
 B[2]='\0';
 C[0]=address[2];
 C[1]=address[3];
 C[2]='\0';
}
}
else if(strcmp(r,"D")==0)
{
if((strlen(D)==2)&&(strlen(E)==2))
{
add[0]=D[0];
add[1]=D[1];
add[2]=E[0];
add[3]=E[1];
add[4]='\0';

 a=hex_int(add)-1;
 hex(a);
  if(a==0)
 {
  Z='1';
 }

 //int_hex(a,"address");
 D[0]=address[0];
 D[1]=address[1];
 D[2]='\0';
 E[0]=address[2];
 E[1]=address[3];
 E[2]='\0';
}
}
else if(strcmp(r,"SP")==0)
{
if(strlen(SP)==4)
{
add[0]=SP[0];
add[1]=SP[1];
add[2]=SP[2];
add[3]=SP[3];
add[4]='\0';

 a=hex_int(add)-1;
 hex(a);
  if(a==0)
 {
  Z='1';
 }

 //int_hex(a,"address");
 SP[0]=address[0];
 SP[1]=address[1];
 SP[2]=address[2];
 SP[3]=address[3];
 SP[4]='\0';
}
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}


void INR(char r[])
{
long int a=0;
//cout<<"r:"<<r<<"\n";
if(strcmp(r,"A")==0)
{
a=char_int(A);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_char(a,"A");
}
else if(strcmp(r,"B")==0)
{
a=hex_int(B);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_hex(a,"B");
}
else if(strcmp(r,"C")==0)
{
a=hex_int(C);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_hex(a,"C");
}
else if(strcmp(r,"D")==0)
{
a=hex_int(D);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_hex(a,"D");
}
else if(strcmp(r,"E")==0)
{
a=hex_int(E);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_hex(a,"E");
}
else if(strcmp(r,"H")==0)
{
a=hex_int(H);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_hex(a,"H");
mem_load();
}
else if(strcmp(r,"L")==0)
{
a=hex_int(L);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_hex(a,"L");
mem_load();
}
else if(strcmp(r,"M")==0)
{
a=char_int(M);
a++;
if(a>256)
{
a=a-256;
CY='1';
}
int_char(a,"M");
load_mem();
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}


void LDA(char ad[])
{
memory_read(ad,"A");
cout<<A<<"\n";
}


void LDAX(char r[])
{
char ad[6];
if(strcmp(r,"H")==0)
{
 if((strlen(H)==2)&&(strlen(L)==2))
 {
 ad[0]=H[0];
 ad[1]=H[1];
 ad[2]=L[0];
 ad[3]=L[1];
 ad[4]='H';
 ad[5]='\0';
 memory_read(ad,"A");
 cout<<A<<"\n";
 }
}
else if(strcmp(r,"B")==0)
{
 if((strlen(B)==2)&&(strlen(C)==2))
 {
 ad[0]=B[0];
 ad[1]=B[1];
 ad[2]=C[0];
 ad[3]=C[1];
 ad[4]='H';
 ad[5]='\0';
 memory_read(ad,"A");
 cout<<A<<"\n";
 }
}
else if(strcmp(r,"D")==0)
{
 if((strlen(D)==2)&&(strlen(E)==2))
 {
 ad[0]=D[0];
 ad[1]=D[1];
 ad[2]=E[0];
 ad[3]=E[1];
 ad[4]='H';
 ad[5]='\0';
 memory_read(ad,"A");
 cout<<A<<"\n";
 }
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}



void STA(char ad[])
{
 char add[6];

 memory_modify(ad,A);

 if((strlen(H)==2)&&(strlen(L)==2))
 {
 add[0]=H[0];
 add[1]=H[1];
 add[2]=L[0];
 add[3]=L[1];
 add[4]='H';
 add[5]='\0';
 }
 if(strcmp(add,ad)==0)
 {
  mem_load();
 }
}



void STAX(char r[])
{
char ad[6];
if(strcmp(r,"H")==0)
{
 if((strlen(H)==2)&&(strlen(L)==2))
 {
 ad[0]=H[0];
 ad[1]=H[1];
 ad[2]=L[0];
 ad[3]=L[1];
 ad[4]='H';
 ad[5]='\0';
 memory_modify(ad,A);
 mem_load();
 cout<<A<<"\n";
 }
}
else if(strcmp(r,"B")==0)
{
 if((strlen(B)==2)&&(strlen(C)==2))
 {
 ad[0]=B[0];
 ad[1]=B[1];
 ad[2]=C[0];
 ad[3]=C[1];
 ad[4]='H';
 ad[5]='\0';
 memory_modify(ad,A);
 cout<<A<<"\n";
 }
}
else if(strcmp(r,"D")==0)
{
 if((strlen(D)==2)&&(strlen(E)==2))
 {
 ad[0]=D[0];
 ad[1]=D[1];
 ad[2]=E[0];
 ad[3]=E[1];
 ad[4]='H';
 ad[5]='\0';
 memory_modify(ad,A);
 cout<<A<<"\n";
 }
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}


void PUSH(char r[])
{
char ad[6];
long int a=0;
if (strlen(SP)==4)
{
if(strcmp(r,"H")==0)
{
DCX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
a=hex_int(H);
int_char(a,"i_c");
memory_modify(ad,i_c);
DCX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
a=hex_int(L);
int_char(a,"i_c");
memory_modify(ad,i_c);
}
else if(strcmp(r,"B")==0)
{
DCX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
a=hex_int(B);
int_char(a,"i_c");
memory_modify(ad,i_c);
DCX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
a=hex_int(C);
int_char(a,"i_c");
memory_modify(ad,i_c);

}
else if(strcmp(r,"D")==0)
{
DCX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
a=hex_int(D);
int_char(a,"i_c");
memory_modify(ad,i_c);
DCX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
a=hex_int(E);
int_char(a,"i_c");
memory_modify(ad,i_c);
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
}


void POP(char r[])
{
char ad[6];

if (strlen(SP)==4)
{
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
if(strcmp(r,"H")==0)
{
memory_read(ad,"L");
mem_load();
INX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
memory_read(ad,"H");
mem_load();
INX("SP");
}
else if(strcmp(r,"B")==0)
{
memory_read(ad,"C");
INX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
memory_read(ad,"B");
INX("SP");
}
else if(strcmp(r,"D")==0)
{
memory_read(ad,"E");
INX("SP");
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';
memory_read(ad,"E");
INX("SP");
}
 else
 {
  printf("!!! SYNTAX ERROR !!!");
 }
}
}


void SPHL()
{
SP[0]=H[0];
SP[1]=H[1];
SP[2]=L[0];
SP[3]=L[1];
SP[4]='\0';
}


void XTHL()
{
long int a=0,l=0,h=0;
char ad[6];

if(strlen(SP)==4)
{
ad[0]=SP[0];
ad[1]=SP[1];
ad[2]=SP[2];
ad[3]=SP[3];
ad[4]='H';
ad[5]='\0';

l=hex_int(L);
h=hex_int(H);

memory_read(ad,"L");
int_char(l,"i_c");
memory_modify(ad,i_c);

a=hex_int(SP)+1;
hex(a);

ad[0]=address[0];
ad[1]=address[1];
ad[2]=address[2];
ad[3]=address[3];
ad[4]='H';
ad[5]='\0';

memory_read(ad,"H");
int_char(h,"i_c");
memory_modify(ad,i_c);
}
}


void CMC()
{
if(CY=='1')
{
CY='0';
}
else
{
CY='1';
}
}


void STC()
{
CY='1';
}




void NOP()
{
HLT();
getch();
exit(0);
}




void HLT()
{
long int a=0,m=0;

if(strlen(A)>=1)
{
a=char_int(A);
int_hex(a,"i_h");
cout<<"A:"<<i_h<<"H"<<"\n";
}
else
cout<<"A:"<<A<<"\n";

if(strlen(B)>=1)
cout<<"B:"<<B<<"H"<<"\n";
else
cout<<"B:"<<B<<"\n";

if(strlen(C)>=1)
cout<<"C:"<<C<<"H"<<"\n";
else
cout<<"C:"<<C<<"\n";

if(strlen(D)>=1)
cout<<"D:"<<D<<"H"<<"\n";
else
cout<<"D:"<<D<<"\n";

if(strlen(E)>=1)
cout<<"E:"<<E<<"H"<<"\n";
else
cout<<"E:"<<E<<"\n";

if(strlen(H)>=1)
cout<<"H:"<<H<<"H"<<"\n";
else
cout<<"H:"<<H<<"\n";

if(strlen(L)>=1)
cout<<"L:"<<L<<"H"<<"\n";
else
cout<<"L:"<<L<<"\n";

if(strlen(M)>=1)
{
m=char_int(M);
int_hex(m,"i_h");
cout<<"M:"<<i_h<<"H"<<"\n";
}
else
cout<<"M:"<<M<<"\n";

if(strlen(SP)>=1)
cout<<"SP:"<<SP<<"H"<<"\n";
else
cout<<"SP:"<<SP<<"\n";

cout<<"CY:"<<CY<<"\n";

cout<<"Z:"<<Z<<"\n";

cout<<"S:"<<S<<"\n";

}


void input()
{
char a1[4],a2[4],b1[4],b2[4],c1[4],c2[4];
char d1[4],d2[4],e1[4],e2[4],h1[4],h2[4],l1[4],l2[4];
char m1[4],m2[4],sp1[6],sp2[6],pc1[6];
long int a=0,b=0,c=0,d=0,e=0,h=0,l=0,m=0,sp=0;

printf("ENTER THE VALUES:\n");

printf("A:");
scanf("%s",&a1);
fflush(stdin);
if(strlen(a1)==0)
{
}
else if(strlen(a1)==1)
{
}
else if(strlen(a1)==2)
{
if(a1[1]=='H')
{
a2[0]='0';
a2[1]=a1[0];
a2[2]='\0';
a=hex_int(a2);
int_char(a,"A");
}
}
else if(strlen(a1)==3)
{
if(a1[2]=='H')
{
a2[0]=a1[0];
a2[1]=a1[1];
a2[2]='\0';
a=hex_int(a2);
int_char(a,"A");
}
}


printf("B:");
scanf("%s",&b1);
fflush(stdin);
if(strlen(b1)==0)
{
}
else if(strlen(b1)==1)
{
}
else if(strlen(b1)==2)
{
if(b1[1]=='H')
{
b2[0]='0';
b2[1]=b1[0];
b2[2]='\0';
if(((int(b2[1])>47)&&(int(b2[1])<58))||((int(b2[1])>64)&&(int(b2[1])<71)))
{
b=hex_int(b2);
int_hex(b,"B");
}
}
}
else if(strlen(b1)==3)
{
if(b1[2]=='H')
{
b2[0]=b1[0];
b2[1]=b1[1];
b2[2]='\0';
if((((int(b2[1])>47)&&(int(b2[1])<58))||((int(b2[1])>64)&&(int(b2[1])<71)))&&(((int(b2[0])>47)&&(int(b2[0])<58))||((int(b2[0])>64)&&(int(b2[0])<71))))
{
b=hex_int(b2);
int_hex(b,"B");
}
}
}


printf("C:");
scanf("%s",&c1);
fflush(stdin);
if(strlen(c1)==0)
{
}
else if(strlen(c1)==1)
{
}
else if(strlen(c1)==2)
{
if(c1[1]=='H')
{
c2[0]='0';
c2[1]=c1[0];
c2[2]='\0';
if(((int(c2[1])>47)&&(int(c2[1])<58))||((int(c2[1])>64)&&(int(c2[1])<71)))
{
c=hex_int(c2);
int_hex(c,"C");
}
}
}
else if(strlen(c1)==3)
{
if(c1[2]=='H')
{
c2[0]=c1[0];
c2[1]=c1[1];
c2[2]='\0';
if((((int(c2[1])>47)&&(int(c2[1])<58))||((int(c2[1])>64)&&(int(c2[1])<71)))&&(((int(c2[0])>47)&&(int(c2[0])<58))||((int(c2[0])>64)&&(int(c2[0])<71))))
{
c=hex_int(c2);
int_hex(c,"C");
}
}
}

printf("D:");
scanf("%s",&d1);
fflush(stdin);
if(strlen(d1)==0)
{
}
else if(strlen(d1)==1)
{
}
else if(strlen(d1)==2)
{
if(d1[1]=='H')
{
d2[0]='0';
d2[1]=d1[0];
d2[2]='\0';
if(((int(d2[1])>47)&&(int(d2[1])<58))||((int(d2[1])>64)&&(int(d2[1])<71)))
{
d=hex_int(d2);
int_hex(d,"D");
}
}
}
else if(strlen(d1)==3)
{
if(d1[2]=='H')
{
d2[0]=d1[0];
d2[1]=d1[1];
d2[2]='\0';
if((((int(d2[1])>47)&&(int(d2[1])<58))||((int(d2[1])>64)&&(int(d2[1])<71)))&&(((int(d2[0])>47)&&(int(d2[0])<58))||((int(d2[0])>64)&&(int(d2[0])<71))))
{
d=hex_int(d2);
int_hex(d,"D");
}
}
}

printf("E:");
scanf("%s",&e1);
fflush(stdin);
if(strlen(e1)==0)
{
}
else if(strlen(e1)==1)
{
}
else if(strlen(e1)==2)
{
if(e1[1]=='H')
{
e2[0]='0';
e2[1]=e1[0];
e2[2]='\0';
if(((int(e2[1])>47)&&(int(e2[1])<58))||((int(e2[1])>64)&&(int(e2[1])<71)))
{
e=hex_int(e2);
int_hex(e,"E");
}
}
}
else if(strlen(e1)==3)
{
if(e1[2]=='H')
{
e2[0]=e1[0];
e2[1]=e1[1];
e2[2]='\0';
if((((int(e2[1])>47)&&(int(e2[1])<58))||((int(e2[1])>64)&&(int(e2[1])<71)))&&(((int(e2[0])>47)&&(int(e2[0])<58))||((int(e2[0])>64)&&(int(e2[0])<71))))
{
e=hex_int(e2);
int_hex(e,"E");
}
}
}

printf("H:");
scanf("%s",&h1);
fflush(stdin);
if(strlen(h1)==0)
{
}
else if(strlen(h1)==1)
{
}
else if(strlen(h1)==2)
{
if(h1[1]=='H')
{
h2[0]='0';
h2[1]=h1[0];
h2[2]='\0';
if(((int(h2[1])>47)&&(int(h2[1])<58))||((int(h2[1])>64)&&(int(h2[1])<71)))
{
h=hex_int(h2);
int_hex(h,"H");
mem_load();
}
}
}
else if(strlen(h1)==3)
{
if(h1[2]=='H')
{
h2[0]=h1[0];
h2[1]=h1[1];
h2[2]='\0';
if((((int(h2[1])>47)&&(int(h2[1])<58))||((int(h2[1])>64)&&(int(h2[1])<71)))&&(((int(h2[0])>47)&&(int(h2[0])<58))||((int(h2[0])>64)&&(int(h2[0])<71))))
{
h=hex_int(h2);
int_hex(h,"H");
mem_load();
}
}
}
mem_load();

printf("L:");
scanf("%s",&l1);
fflush(stdin);
if(strlen(l1)==0)
{
}
else if(strlen(l1)==1)
{
}
else if(strlen(l1)==2)
{
if(l1[1]=='H')
{
l2[0]='0';
l2[1]=l1[0];
l2[2]='\0';
if(((int(l2[1])>47)&&(int(l2[1])<58))||((int(l2[1])>64)&&(int(h2[1])<71)))
{
l=hex_int(l2);
int_hex(l,"L");
mem_load();
}
}
}
else if(strlen(l1)==3)
{
if(l1[2]=='H')
{
l2[0]=l1[0];
l2[1]=l1[1];
l2[2]='\0';
if((((int(l2[1])>47)&&(int(l2[1])<58))||((int(l2[1])>64)&&(int(l2[1])<71)))&&(((int(l2[0])>47)&&(int(l2[0])<58))||((int(l2[0])>64)&&(int(l2[0])<71))))
{
l=hex_int(l2);
int_hex(l,"L");
mem_load();
}
}
}


printf("M:");
scanf("%s",&m1);
fflush(stdin);
if(strlen(m1)==0)
{
}
else if(strlen(m1)==1)
{
}
else if(strlen(m1)==2)
{
if(m1[1]=='H')
{
m2[0]='0';
m2[1]=m1[0];
m2[2]='\0';
if((strlen(H)==2)&&(strlen(L)==2))
{
m=hex_int(m2);
int_char(m,"M");
load_mem();
}
}
}
else if(strlen(m1)==3)
{
if(m1[2]=='H')
{
m2[0]=m1[0];
m2[1]=m1[1];
m2[2]='\0';
m=hex_int(m2);
if((strlen(H)==2)&&(strlen(L)==2))
{
int_char(m,"M");
load_mem();
}
}
}


printf("SP:");
scanf("%s",&sp1);
fflush(stdin);
if(strlen(sp1)==0)
{
}
else if(strlen(sp1)==1)
{
}
else if(strlen(sp1)==2)
{
if(sp1[1]=='H')
{
sp2[0]='0';
sp2[1]='0';
sp2[2]='0';
sp2[3]=sp1[0];
sp2[4]='\0';
if(((int(sp2[3])>47)&&(int(sp2[3])<58))||((int(sp2[3])>64)&&(int(sp2[3])<71)))
{
sp=hex_int(sp2);
hex(sp);
SP[0]=address[0];
SP[1]=address[1];
SP[2]=address[2];
SP[3]=address[3];
SP[4]='\n';
}
}
}
else if(strlen(sp1)==3)
{
if(sp1[2]=='H')
{
sp2[0]='0';
sp2[1]='0';
sp2[2]=sp1[0];
sp2[3]=sp1[1];
sp2[4]='\0';
if((((int(sp2[3])>47)&&(int(sp2[3])<58))||((int(sp2[3])>64)&&(int(sp2[3])<71)))&&(((int(sp2[2])>47)&&(int(sp2[2])<58))||((int(sp2[2])>64)&&(int(sp2[2])<71))))
{
sp=hex_int(sp2);
hex(sp);
SP[0]=address[0];
SP[1]=address[1];
SP[2]=address[2];
SP[3]=address[3];
SP[4]='\n';
}
}
}
else if(strlen(sp1)==4)
{
if(sp1[3]=='H')
{
sp2[0]='0';
sp2[1]=sp1[0];
sp2[2]=sp1[1];
sp2[3]=sp1[2];
sp2[4]='\0';
if((((int(sp2[3])>47)&&(int(sp2[3])<58))||((int(sp2[3])>64)&&(int(sp2[3])<71)))&&(((int(sp2[2])>47)&&(int(sp2[2])<58))||((int(sp2[2])>64)&&(int(sp2[2])<71)))&&(((int(sp2[1])>47)&&(int(sp2[1])<58))||((int(sp2[1])>64)&&(int(sp2[1])<71))))
{
sp=hex_int(sp2);
hex(sp);
SP[0]=address[0];
SP[1]=address[1];
SP[2]=address[2];
SP[3]=address[3];
SP[4]='\n';
}
}
}
else if(strlen(sp1)==5)
{
if(sp1[4]=='H')
{
sp2[0]=sp1[0];
sp2[1]=sp1[1];
sp2[2]=sp1[2];
sp2[3]=sp1[3];
sp2[4]='\0';
if(((((int(sp2[3])>47)&&(int(sp2[3])<58))||((int(sp2[3])>64)&&(int(sp2[3])<71)))&&(((int(sp2[2])>47)&&(int(sp2[2])<58))||((int(sp2[2])>64)&&(int(sp2[2])<71)))&&(((int(sp2[1])>47)&&(int(sp2[1])<58))||((int(sp2[1])>64)&&(int(sp2[1])<71))))&&(((int(sp2[0])>47)&&(int(sp2[0])<58))||((int(sp2[0])>64)&&(int(sp2[0])<71))))
{
sp=hex_int(sp2);
hex(sp);
SP[0]=address[0];
SP[1]=address[1];
SP[2]=address[2];
SP[3]=address[3];
SP[4]='\n';
}
}
}

}


long int char_int(char r[])
{
long  int i=0,cint=0,cint1=0,ci=0,j=0;
char ch[6];

 for(i=0;i<strlen(r);i++)
 {
 if((int(r[i])>47)&&(int(r[i])<58))
 {
  ch[j]=r[i];
  j++;
  }
  }ch[j]='\0';



if(strcmp(r,ch)==0)
{
for(i=0;i<strlen(r);i++)
{
  switch(r[i])
{
case '0':
   ci=0;
   break;
case '1':
   ci=1;
   break;
case '2':
   ci=2;
   break;
case '3':
   ci=3;
   break;
case '4':
   ci=4;
   break;
case '5':
   ci=5;
   break;
case '6':
   ci=6;
   break;
case '7':
   ci=7;
   break;
case '8':
   ci=8;
   break;
case '9':
   ci=9;
   break;
 }
 cint1=ci*pow(10,(strlen(r)-i-1));
 cint=cint+cint1;
 }
  return cint;
 }
 else return 0;

}


void int_char(long int in,char r[])
{

long int i=0,d=0,b=0;


char c[6];
d=in;

while(d!=0)
{
b=(d%10);
d=d/10;

switch(b)
{
case 0:
   c[i]='0';
   i++;
   break;
case 1:
   c[i]='1';
   i++;
   break;
case 2:
   c[i]='2';
   i++;
   break;
case 3:
   c[i]='3';
   i++;
   break;
case 4:
   c[i]='4';
   i++;
   break;
case 5:
   c[i]='5';
   i++;
   break;
case 6:
   c[i]='6';
   i++;
   break;
case 7:
   c[i]='7';
   i++;
   break;
case 8:
   c[i]='8';
   i++;
   break;
case 9:
   c[i]='9';
   i++;
   break;
   }
 }c[i]='\0';

 if(strcmp(r,"A")==0)
 {
  if(strlen(c)==0)
{
 A[2]='0';
 A[1]='0';
 A[0]='0';
 A[3]='\0';
}
else if(strlen(c)==1)
{
 A[2]=c[0];
 A[1]='0';
 A[0]='0';
 A[3]='\0';
}
else if(strlen(c)==2)
{
 A[2]=c[0];
 A[1]=c[1];
 A[0]='0';
 A[3]='\0';
}
else if(strlen(c)==3)
{
 A[2]=c[0];
 A[1]=c[1];
 A[0]=c[2];
 A[3]='\0';
}
}
else if(strcmp(r,"M")==0)
 {
  if(strlen(c)==0)
{
 M[2]='0';
 M[1]='0';
 M[0]='0';
 M[3]='\0';
}
else if(strlen(c)==1)
{
 M[2]=c[0];
 M[1]='0';
 M[0]='0';
 M[3]='\0';
}
else if(strlen(c)==2)
{
 M[2]=c[0];
 M[1]=c[1];
 M[0]='0';
 M[3]='\0';
}
else if(strlen(c)==3)
{
 M[2]=c[0];
 M[1]=c[1];
 M[0]=c[2];
 M[3]='\0';
}
}
else if(strcmp(r,"i_c")==0)
 {
  if(strlen(c)==0)
{
}
else if(strlen(c)==1)
{
 i_c[2]=c[0];
 i_c[1]='0';
 i_c[0]='0';
 i_c[3]='\0';
}
else if(strlen(c)==2)
{
 i_c[2]=c[0];
 i_c[1]=c[1];
 i_c[0]='0';
 i_c[3]='\0';
}
else if(strlen(c)==3)
{
 i_c[2]=c[0];
 i_c[1]=c[1];
 i_c[0]=c[2];
 i_c[3]='\0';
}
}
}


long int hex_int(char h[])
{
long int i=0,hint=0,hint1=0,hi=0,j=0;
char he[6];

for(i=0;i<(strlen(h));i++)
{
if(((int(h[i])>47)&&(int(h[i])<58))||((int(h[i])>64)&&(int(h[i])<71)))
{
he[j]=h[i];
j++;
}
}he[j]='\0';

if(strcmp(he,h)==0)
{
for(i=0;i<(strlen(h));i++)
{
  switch(h[i])
{
case '0':
   hi=0;
   break;
case '1':
   hi=1;
   break;
case '2':
   hi=2;
   break;
case '3':
   hi=3;
   break;
case '4':
   hi=4;
   break;
case '5':
   hi=5;
   break;
case '6':
   hi=6;
   break;
case '7':
   hi=7;
   break;
case '8':
   hi=8;
   break;
case '9':
   hi=9;
   break;
case 'A':
   hi=10;
   break;
case 'B':
   hi=11;
   break;
case 'C':
   hi=12;
   break;
case 'D':
   hi=13;
   break;
case 'E':
   hi=14;
   break;
case 'F':
   hi=15;
   break;
  }
 hint1=hi*pow(16,(strlen(h)-i-1));
 hint=hint+hint1;
 }
 return hint;
 }
 else return 0;

}


void int_hex(long int in,char r[])
{

long int i=0,j=0,k=0,d=0,b=0;
char hexd[6];


d=in;

while(d!=0)
{
b=(d%16);
d=d/16;

switch(b)
{
case 0:
   hexd[i]='0';
   i++;
   break;
case 1:
   hexd[i]='1';
   i++;
   break;
case 2:
   hexd[i]='2';
   i++;
   break;
case 3:
   hexd[i]='3';
   i++;
   break;
case 4:
   hexd[i]='4';
   i++;
   break;
case 5:
   hexd[i]='5';
   i++;
   break;
case 6:
   hexd[i]='6';
   i++;
   break;
case 7:
   hexd[i]='7';
   i++;
   break;
case 8:
   hexd[i]='8';
   i++;
   break;
case 9:
   hexd[i]='9';
   i++;
   break;
case 10:
   hexd[i]='A';
   i++;
   break;
case 11:
   hexd[i]='B';
   i++;
   break;
case 12:
   hexd[i]='C';
   i++;
   break;
case 13:
   hexd[i]='D';
   i++;
   break;
case 14:
   hexd[i]='E';
   i++;
   break;
case 15:
   hexd[i]='F';
   i++;
   break;
}
}hexd[i]='\0';

if(strcmp(r,"H")==0)
{
for(j=0;j<2-i;j++)
{
 H[j]='0';
}
for(j=2-i,k=i-1;k>=0;j++,k--)
{
 H[j]=hexd[k];
}H[j]='\0';
}
else if(strcmp(r,"L")==0)
{
for(j=0;j<2-i;j++)
{
 L[j]='0';
}
for(j=2-i,k=i-1;k>=0;j++,k--)
{
 L[j]=hexd[k];
}
}
else if(strcmp(r,"B")==0)
{
for(j=0;j<2-i;j++)
{
 B[j]='0';
}
for(j=2-i,k=i-1;k>=0;j++,k--)
{
 B[j]=hexd[k];
}
}
else if(strcmp(r,"C")==0)
{
for(j=0;j<2-i;j++)
{
 C[j]='0';
}
for(j=2-i,k=i-1;k>=0;j++,k--)
{
 C[j]=hexd[k];
}
}
else if(strcmp(r,"D")==0)
{
for(j=0;j<2-i;j++)
{
 D[j]='0';
}
for(j=2-i,k=i-1;k>=0;j++,k--)
{
 D[j]=hexd[k];
}
}
else if(strcmp(r,"E")==0)
{
for(j=0;j<2-i;j++)
{
 E[j]='0';
}
for(j=2-i,k=i-1;k>=0;j++,k--)
{
 E[j]=hexd[k];
}
}
else if(strcmp(r,"address")==0)
{
for(j=0;j<4-i;j++)
{
 address[j]='0';
}
for(j=4-i,k=i-1;k>=0;j++,k--)
{
 address[j]=hexd[k];
}address[4]='\0';
}
else if(strcmp(r,"i_h")==0)
{
if(strlen(hexd)==0)
{
i_h[0]='0';
i_h[1]='0';
i_h[2]='\0';
}
else if(strlen(hexd)==1)
{
i_h[0]='0';
i_h[1]=hexd[0];
i_h[2]='\0';
}
else if(strlen(hexd)==2)
{
i_h[0]=hexd[1];
i_h[1]=hexd[0];
i_h[2]='\0';
}
}
}


void load_mem()
{
char ad[6];

if((strlen(H)==2)&&(strlen(L)==2))
{
ad[0]=H[0];
ad[1]=H[1];
ad[2]=L[0];
ad[3]=L[1];
ad[4]='H';
ad[5]='\0';

if(strlen(M)==0)
{
}
else if(strlen(M)==1)
{
 M[2]=M[0];
 M[1]='0';
 M[0]='0';
 M[3]='\0';
}
else if(strlen(M)==2)
{
 M[2]=M[1];
 M[1]=M[0];
 M[0]='0';
 M[3]='\0';
}
memory_modify(ad,M);
}

}

void mem_load()
{
char ad[6];

if((strlen(H)==2)&&(strlen(L)==2))
{
ad[0]=H[0];
ad[1]=H[1];
ad[2]=L[0];
ad[3]=L[1];
ad[4]='H';
ad[5]='\0';
memory_read(ad,"M");
}
}



void JNZ(char ad[])
{
 char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

if(Z!='1')
{
 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
     }
    }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;
      if(cl>0)
      {

      if(strcmp(fxn,"HLT")==0)
      {
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }
     }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }

      if(cl>0)
      {
      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNC")==0)
      {
       JNC(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
       JM(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
       JP(add);
      }
       else if(strcmp(fxn,"JC")==0)
      {
       JC(add);
      }
       else if(strcmp(fxn,"JZ")==0)
      {
       JZ(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
      if(strcmp(add,ad)==0)
       {
	cl=1;
	JNZ(add);
	cl=0;
	break;
       }
       else
       {
	JNZ(add);
       }
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

      }
    }
  }
}
fclose(fpo1);
}

}



void JNC(char ad[])
{
 char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

if(CY!='1')
{
 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
     }
    }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;
      if(cl>0)
      {

      if(strcmp(fxn,"HLT")==0)
      {
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }
     }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }

      if(cl>0)
      {
      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
       JNZ(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
       JM(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
       JP(add);
      }
       else if(strcmp(fxn,"JC")==0)
      {
       JC(add);
      }
       else if(strcmp(fxn,"JZ")==0)
      {
       JZ(add);
      }
      else if(strcmp(fxn,"JNC")==0)
      {
      if(strcmp(add,ad)==0)
       {
	cl=1;
	JNC(add);
	cl=0;
	break;
       }
       else
       {
	JNC(add);
       }
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

      }
    }
  }
}
fclose(fpo1);
}

}



void JM(char ad[])
{
 char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

if(S=='1')
{
 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
     }
    }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;
      if(cl>0)
      {

      if(strcmp(fxn,"HLT")==0)
      {
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }
     }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }

      if(cl>0)
      {
      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
       JNZ(add);
      }
      else if(strcmp(fxn,"JNC")==0)
      {
       JNC(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
       JP(add);
      }
       else if(strcmp(fxn,"JC")==0)
      {
       JC(add);
      }
       else if(strcmp(fxn,"JZ")==0)
      {
       JZ(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
      if(strcmp(add,ad)==0)
       {
	cl=1;
	JM(add);
	cl=0;
	break;
       }
       else
       {
	JM(add);
       }
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

      }
    }
  }
}
fclose(fpo1);
}

}



void JP(char ad[])
{
 char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

if(S!='1')
{
 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
     }
    }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;
      if(cl>0)
      {

      if(strcmp(fxn,"HLT")==0)
      {
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }
     }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }

      if(cl>0)
      {
      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
       JNZ(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
       JM(add);
      }
      else if(strcmp(fxn,"JNC")==0)
      {
       JNC(add);
      }
       else if(strcmp(fxn,"JC")==0)
      {
       JC(add);
      }
       else if(strcmp(fxn,"JZ")==0)
      {
       JZ(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
      if(strcmp(add,ad)==0)
       {
	cl=1;
	JP(add);
	cl=0;
	break;
       }
       else
       {
	JP(add);
       }
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

      }
    }
  }
}
fclose(fpo1);
}

}



void JC(char ad[])
{
 char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

if(CY=='1')
{
 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
     }
    }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;
      if(cl>0)
      {

      if(strcmp(fxn,"HLT")==0)
      {
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }
     }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }

      if(cl>0)
      {
      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
       JNZ(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
       JM(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
       JP(add);
      }
       else if(strcmp(fxn,"JNC")==0)
      {
       JNC(add);
      }
       else if(strcmp(fxn,"JZ")==0)
      {
       JZ(add);
      }
      else if(strcmp(fxn,"JC")==0)
      {
      if(strcmp(add,ad)==0)
       {
	cl=1;
	JC(add);
	cl=0;
	break;
       }
       else
       {
	JC(add);
       }
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

      }
    }
  }
}
fclose(fpo1);
}

}




void JZ(char ad[])
{
 char ch,fxn[5],add[6],reg1[3],reg2[2],ins[10],loop[10];
 FILE *fpo1;
long int k=0,c=0,s=0,space=0,comma=0,cl=0,colon=0;

if(Z=='1')
{
 fpo1=fopen("Instruct.dat","rb+");

 while(!feof(fpo1))
 {

   /* read a char from the file */
   ch = fgetc(fpo1);
   if(ch==EOF)
    {
     break;
    }
    else
    {
     if(ch!='\n')
     {
      if((ch!=' ')&&(ch!=',')&&(ch!=':'))
      {
       ins[k]=ch;
       k++;
      }
      else
     {
      if(ch==' ')
      {
       space++;
       s++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==',')
      {
       comma++;
       c++;
       ins[k]='\0';
       k=0;
      }
      else if(ch==':')
      {
       colon++;
       cl++;
       ins[k]='\0';
       k=0;
      }


      if(space==1)
      {
       strcpy(fxn,ins);
       cout<<"fxn:"<<fxn<<"\n";
       space=0;
      }
      else if(comma==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(add,ins);
       cout<<"add:"<<add<<"\n";
       comma=0;
       }
       else
       {
       strcpy(reg1,ins);
       cout<<"reg1:"<<reg1<<"\n";
       comma=0;
       }
      }
      else if(colon==1)
      {
       if(strlen(ins)>2)
       {
       strcpy(loop,ins);
       cout<<"LOOP:"<<loop<<"\n";
       colon=0;
       }
     }
    }
    }
     else if(s==0)
     {
      ins[k]='\0';
      strcpy(fxn,ins);
      cout<<"fxn:"<<fxn<<"\n";
      k=0;
      if(cl>0)
      {

      if(strcmp(fxn,"HLT")==0)
      {
      }
      else if(strcmp(fxn,"XCHG")==0)
      {
       XCHG();
      }
      else if(strcmp(fxn,"SPHL")==0)
      {
       SPHL();
      }
      else if(strcmp(fxn,"XTHL")==0)
      {
       XTHL();
      }
      else if(strcmp(fxn,"NOP")==0)
      {
       NOP();
      }
      else if(strcmp(fxn,"STC")==0)
      {
       STC();
      }
      else if(strcmp(fxn,"CMC")==0)
      {
       CMC();
      }
      else
      {
       cout<<"!!! SYNTAX ERROR !!!"<<"\n";
      }
     }

     }
     else
      {
       ins[k]='\0';
       strcpy(add,ins);
       k=0;
       s=0;
       c=0;

       if(strlen(add)<=2)
       {
	strcpy(reg2,add);
	cout<<"reg2:"<<reg2<<"\n";
       }
       else
       {
	cout<<"add:"<<add<<"\n";
       }

      if(cl>0)
      {
      if(strcmp(fxn,"LXI")==0)
      {
       LXI(reg1,add);
       }
      else if(strcmp(fxn,"LHLD")==0)
      {
       LHLD(add);
      }
      else if(strcmp(fxn,"SHLD")==0)
      {
       SHLD(add);
      }
      else if(strcmp(fxn,"INX")==0)
      {
       INX(reg2);
      }
      else if(strcmp(fxn,"MOV")==0)
      {
       MOV(reg1,reg2);
      }
      else if(strcmp(fxn,"DCR")==0)
      {
       DCR(reg2);
      }
      else if(strcmp(fxn,"DCX")==0)
      {
       DCX(reg2);
      }
      else if(strcmp(fxn,"INR")==0)
      {
       INR(reg2);
      }
      else if(strcmp(fxn,"LDA")==0)
      {
       LDA(add);
      }
      else if(strcmp(fxn,"LDAX")==0)
      {
       LDAX(reg2);
      }
      else if(strcmp(fxn,"ADD")==0)
      {
       ADD(reg2);
      }
      else if(strcmp(fxn,"SUB")==0)
      {
       SUB(reg2);
      }
      else if(strcmp(fxn,"MVI")==0)
      {
       MVI(reg1,add);
      }
      else if(strcmp(fxn,"STA")==0)
      {
       STA(add);
      }
      else if(strcmp(fxn,"STAX")==0)
      {
       STAX(reg2);
      }
      else if(strcmp(fxn,"PUSH")==0)
      {
       PUSH(reg2);
      }
      else if(strcmp(fxn,"POP")==0)
      {
       POP(reg2);
      }
      else if(strcmp(fxn,"DAD")==0)
      {
       DAD(reg2);
      }
      else if(strcmp(fxn,"ADI")==0)
      {
       ADI(add);
      }
      else if(strcmp(fxn,"SUI")==0)
      {
       SUI(add);
      }
      else if(strcmp(fxn,"CMP")==0)
      {
       CMP(reg2);
      }
      else if(strcmp(fxn,"CPI")==0)
      {
       CPI(add);
      }
      else if(strcmp(fxn,"JNZ")==0)
      {
       JNZ(add);
      }
      else if(strcmp(fxn,"JM")==0)
      {
       JM(add);
      }
      else if(strcmp(fxn,"JP")==0)
      {
       JP(add);
      }
       else if(strcmp(fxn,"JC")==0)
      {
       JC(add);
      }
       else if(strcmp(fxn,"JNC")==0)
      {
       JNC(add);
      }
      else if(strcmp(fxn,"JZ")==0)
      {
      if(strcmp(add,ad)==0)
       {
	cl=1;
	JZ(add);
	cl=0;
	break;
       }
       else
       {
	JZ(add);
       }
      }
       else
      {
       printf("!!! SYNTAX ERROR !!!\n");
      }

      }
    }
  }
}

fclose(fpo1);
}

}





